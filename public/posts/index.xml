<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on tker-78/portfolio</title>
    <link>https://example.org/posts/</link>
    <description>Recent content in Posts on tker-78/portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Dec 2023 06:46:49 +0900</lastBuildDate>
    <atom:link href="https://example.org/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>941. Searching for Items in an Array</title>
      <link>https://example.org/posts/941.-searching-for-items-in-an-array/</link>
      <pubDate>Sun, 31 Dec 2023 06:46:49 +0900</pubDate>
      <guid>https://example.org/posts/941.-searching-for-items-in-an-array/</guid>
      <description>問題&#xA;Given an array of integers arr, return true if and only if it is a valid mountain array.&#xA;Recall that arr is a mountain array if and only if:&#xA;arr.length &amp;gt;= 3 There exists some i with 0 &amp;lt; i &amp;lt; arr.length - 1 such that: arr[0] &amp;lt; arr[1] &amp;lt; &amp;hellip; &amp;lt; arr[i - 1] &amp;lt; arr[i] arr[i] &amp;gt; arr[i + 1] &amp;gt; &amp;hellip; &amp;gt; arr[arr.length - 1]&#xA;解答の方針 位置を表す変数iを定義する(初期値は0) walk upの回数をiに加算する walk upが完了したら、その位置が配列の中間位置にあることを確認する walk downの回数をiに加算する iがlen(arr)-1と等しければ、trueを返す 実装 func validMountainArray(arr []int) bool { lenArray := len(arr) i := 0 for i+1 &amp;lt; lenArray &amp;amp;&amp;amp; arr[i] &amp;lt; arr[i+1] { i++ } if i == 0 || i == lenArray -1 { return false } for i+1 &amp;lt; lenArray &amp;amp;&amp;amp; arr[i] &amp;gt; arr[i+1] { i++ } return i == lenArray-1 } ポイント 位置を表す変数をfor文の外に定義することで、 頂点の前後で処理を分けることができる.</description>
    </item>
    <item>
      <title>896. Monotonic Array</title>
      <link>https://example.org/posts/896.-monotonic-array/</link>
      <pubDate>Sun, 31 Dec 2023 06:46:00 +0900</pubDate>
      <guid>https://example.org/posts/896.-monotonic-array/</guid>
      <description>問題 An array is monotonic if it is either monotone increasing or monotone decreasing. An array nums is monotone increasing if for all i &amp;lt;= j, nums[i] &amp;lt;= nums[j]. An array nums is monotone decreasing if for all i &amp;lt;= j, nums[i] &amp;gt;= nums[j]. Given an integer array nums, return true if the given array is monotonic, or false otherwise.&#xA;解答の方針 flatの場合 increasingの場合 decreasingの場合 に分けて処理する。 実装 func isMonotonic(nums []int) bool { // flat if nums[0] == nums[len(nums)-1] { v0 := nums[0] for _, v := range nums { if v !</description>
    </item>
    <item>
      <title>859. Buddy String</title>
      <link>https://example.org/posts/859.-buddy-string/</link>
      <pubDate>Sun, 31 Dec 2023 06:41:19 +0900</pubDate>
      <guid>https://example.org/posts/859.-buddy-string/</guid>
      <description>問題&#xA;Given two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false.&#xA;Swapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j].&#xA;For example, swapping at indices 0 and 2 in &amp;ldquo;abcd&amp;rdquo; results in &amp;ldquo;cbad&amp;rdquo;.&#xA;解答の方針 sとgoalの長さが異なればfalseを返す&#xA;sとgoalが同じ文字列の場合、 文字の出現頻度をカウントして、同じであれば、trueを返す これには、map[string]intを使う。</description>
    </item>
    <item>
      <title>501. Find Mode in Binary Search Tree</title>
      <link>https://example.org/posts/501.-find-mode-in-binary-search-tree/</link>
      <pubDate>Sun, 31 Dec 2023 06:40:21 +0900</pubDate>
      <guid>https://example.org/posts/501.-find-mode-in-binary-search-tree/</guid>
      <description>問題&#xA;Given the root of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it.&#xA;If the tree has more than one mode, return them in any order.&#xA;Assume a BST is defined as follows:&#xA;The left subtree of a node contains only nodes with keys less than or equal to the node&amp;rsquo;s key. The right subtree of a node contains only nodes with keys greater than or equal to the node&amp;rsquo;s key.</description>
    </item>
    <item>
      <title>326. Power of Three</title>
      <link>https://example.org/posts/326.-power-of-three/</link>
      <pubDate>Sun, 31 Dec 2023 06:34:41 +0900</pubDate>
      <guid>https://example.org/posts/326.-power-of-three/</guid>
      <description>問題&#xA;Given an integer n, return true if it is a power of three. Otherwise, return false. An integer n is a power of three, if there exists an integer x such that n == 3x.&#xA;解答の方針 math.Log()を使う.&#xA;log3Nが整数かどうかの判定を行う log3n = (log2n / log23) 実装 func isPowerOfThree(n int) bool { logNum := math.Log10(n) / math.Log10(3) // n = 27 =&amp;gt; 2.9999999997 if int(logNum) % 3 == 0 { return true } else { return false } } この場合、浮動小数点が揃わないため、判定が難しい。</description>
    </item>
  </channel>
</rss>
